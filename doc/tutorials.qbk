[/
 Copyright (c) 2013-2014 Borislav Stanimirov, Zahary Karadjov

 Distributed under the Boost Software License, Version 1.0.
 See accompanying file LICENSE_1_0.txt or copy at
 http://www.boost.org/LICENSE_1_0.txt
/]

[section:tutorials Tutorials]

[section:messages Messages]

[indexterm2 message..example]

[import ../tutorial/messages.cpp]
[tutorial_messages]

[endsect]

[section:mutation Object mutation]

[indexterm2 mutation..example]

[import ../tutorial/mutation.cpp]
[tutorial_mutation]

[section:mrules Mutation rules]

[indexterm2 mutation rules..example]

[import ../tutorial/mutation_rules.cpp]
[tutorial_mutation_rules]

[endsect]

[endsect]

[section:combinators Multicast result combinators]

[indexterm2 combinators..example]

[import ../tutorial/combinators.cpp]
[tutorial_combinators]

[endsect]

[section:tips_tricks Tips and tricks]

* When adding the same set of messages to multiple mixins, create a define of
them all. Like: `#define transform_messages set_position_msg & set_orientation_msg`.
Then use it like this `BOOST_DEFINE_MIXIN(x, some_messages & transform_messages);`
* Instead of using the long message declaration macros, consider defining your
own. Maybe something like `#define BM_C_MSG_1 BOOST_MIXIN_CONST_MESSAGE_1`
* Prefer using `object_type_template`-s instead of mutating each new object in
the same fashion.
* Prefer using `same_type_mutator` when mutating multiple objects of the same
type.
* If you have some messages that are valid for /all/ objects in your system,
instead of adding them to a mixin present in every object, consider having some
stand-alone functions where your first parameter is `boost::mixin::object&`.
They will be indistinguishable from messages.
* If you have multicast logic that needs to stop after a success in any of the
message implementations in an object, have your messages return `bool` and then
use the `boolean_or` combinator. It will stop the message execution on the first
`true`.

[section:common_mixin_parent Mixins with a common parent]

Sometimes you will feel the need to have mixins with a common parent. Most
likely this will happen when you want to define two different mixins that share
some common functionality. Moving the shared functionality in the same common
parent is a good idea and Boost.Mixin will work exactly the same way if you do
this. However there is a pitfall in this case. It happens when you have
multiple inheritance. Due to the special nature in which the library arranges the
memory internally, if a mixin type has more than one parent, using `bm_this` in
some of those parents might lead to crashes.

More precisely, when the library allocates memory for a mixin type, it allocates
a buffer that is slightly bigger than needed and puts the pointer to the owning
object at its front. What `bm_this` does is actually an offset from `this` with
the appropriate number of bytes for `object*`. So if a parent of your mixin
type, other than the first, calls `bm_this`, it will end up returning an invalid
pointer to the owning object.

To be able to have parents, other than the first, with access to the owning
object we suggest that you create a pure virtual function that gets it from the
actual mixin type.

Say `virtual object* get_bm_object() = 0;` in the parents, which is implemented
in the child class (the actual mixin defined with `BOOST_DEFINE_MIXIN`) by
simply `return bm_this`.

Of course there are other ways to accomplish this, for example with CRTP, but
the virtual function is probably the cleanest and safest one.

[endsect]

[endsect]

[section:common_problems Common problems and solutions]

[section:compiler_errors Compiler errors]

* No overload of `_boost_get_mixin_type_info` supports the type
    * Problem: In your code you're referring to a mixin, that the library cannot
    recognize as such. This could be caused by a mutation, or by calling
    `object::get` or `object::has`.
    * Solution: Make sure you've spelled the name of the mixin correctly. Make
    sure the line that produces the error has visibility to the declaration of
    this mixin (by `BOOST_DECLARE_MIXIN`)
* No overload of `_boost_get_mixin_feature` supports the type
    * Problem: You're calling `object::implements` with a message that cannot be
    recognized as such.
    * Solution: Make sure you've spelled the message name correctly. Make sure
    you've added the `_msg` suffix to the message.
* No overload of `_boost_register_mixin_feature` supports the type
* ...or no overload of operator `&` supports the type
    * Problem: You're adding a mixin feature to the feature list in
    `BOOST_DEFINE_MIXIN` that cannot be recognized as such
    * Solution: If it's a message, check that you've added the `_msg` suffix.
    If it's an allocator, make sure it's derived from the `mixin_allocator`
    class
* Redefinition of _boost_get_mixin_feature
    * Problem: You're defining two messages with `BOOST_MIXIN_DEFINE_MESSAGE`
    that have same name in the same file.
    * Solution: Declare the messages as overloads with
    `BOOST_MIXIN_xxx_MESSAGE_N_OVERLOAD`. Define the overloads.

[endsect]

[section:linker_errors Linker errors]

Undefined reference (mentioned below) will be reported as an "unresolved
external symbol" in Visual C++.

* Undefined reference to `_boost_mixin_get_type_info`
    * Problem 1: A type has been declared as a mixin, but hasn't been defined
    * Solution 1: Define the mixin with `BOOST_DEFINE_MIXIN`
    * Problem 2: A mixin is being used from a dynamic library and hasn't been
    exported correctly.
    * Solution 2: Declare the mixin properly as `BOOST_DECLARE_EXPORTED_MIXIN`
* Undefined references to `_boost_register_mixin_feature` and
`_booost_get_mixin_feature`
    * Problem 1: A message has been declared but not defined.
    * Solution 1: Define the message with `BOOST_MIXIN_DEFINE_MESSAGE`
    * Problem 2 : A message is being used from a dynamic library and hasn't been
    exported correctly.
    * Solution 2: Declare the message properly as
    `BOOST_MIXIN_EXPORTED_xxx_MESSAGE_N`
* Multiple references to `_boost_register_mixin_feature` and
`_booost_get_mixin_feature`
    * Problem: Two messages have been defined with the same name and different
    arguments.
    * Solution: Declare the messages as overloads with
    `BOOST_MIXIN_xxx_MESSAGE_N_OVERLOAD`

[endsect]

[section:runtime_errors Runtime errors]

The exceptions the library may throw, what causes them, and how to fix them
can be found in the reference. Besides them, these may also occur:

* Assertion fails in `domain.hpp`: "you have to increase the maximum number of
mixins"
    * Problem: The maximum number of registered mixins supported by the library
    has been surpassed.
    * Solution: You have to increase the value of `BOOST_MIXIN_MAX_MIXINS` in
    the file `config.hpp` of the library and then rebuild it.
* Assertion fails in `domain.cpp`: "you have to increase the maximum number of
messages"
    * Problem: The maximum number of registered messages supported by the
    library has been surpassed.
    * Solution: You have to increase the value of `BOOST_MIXIN_MAX_MESSAGES` in
    the file `config.hpp` of the library and then rebuild it.

[endsect]

[endsect]

[endsect]
