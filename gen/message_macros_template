
#define _BOOST_MIXIN_MESSAGE%{arity}_DECL(export, message_name, method_name, return_type, constness, message_mechanism %{args_coma}) \
    /* mechanism shows whether it's a multicast or unicast */ \
    \
    /* step 1: define the message struct */ \
    struct export _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name) : public ::boost::mixin::internal::message_t \
    { \
        /* define the actual caller func */ \
        template <typename Mixin, typename Ret, Ret (Mixin::*Method)(%{arg_types}) constness> \
        static Ret caller%{arity}(void* _b_m_ptr %{args_signature}) \
        { \
            Mixin* _b_m_m = reinterpret_cast<Mixin*>(_b_m_ptr); \
            return (_b_m_m->*Method)(%{fwd_args}); \
        } \
        typedef return_type (*caller_func)(void* %{coma_arg_types}); \
        _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)() \
            : ::boost::mixin::internal::message_t(BOOST_PP_STRINGIZE(message_name), message_mechanism, false) \
        {} \
        template <typename Mixin> \
        ::boost::mixin::internal::func_ptr get_caller_for() const \
        { \
            /* prevent the linker from optimizing away the caller function */ \
            static caller_func caller = caller%{arity}<constness Mixin, return_type, &Mixin::method_name>; \
            /* cast the caller to a void (*)() - safe according to the standard */ \
            return reinterpret_cast< ::boost::mixin::internal::func_ptr>(caller); \
        } \
    }; \
    /* step 2: define a message tag, that will be used to identify the message in feature lists */ \
    /* it would have been nice if we could set this global variable to the unique global instance of the feature*/ \
    /* but unfortunately we cannot trust dynamic libraries to keep it straight for us */ \
    /* hence we rely on a getter like the mixin one */ \
    extern export _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name) * _BOOST_MIXIN_MESSAGE_TAG(message_name); \
    /* step 3: declare the feature getter and manual registrator for the message */ \
    extern export ::boost::mixin::feature& _boost_get_mixin_feature(const _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export void _boost_register_mixin_feature(const _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)*); \

#define _BOOST_MIXIN_MESSAGE%{arity}_UNI(export, message_name, method_name, return_type, constness %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_DECL(export, message_name, method_name, return_type, constness, unicast %{args_coma}) \
    /* step 4: define the message function -> the one that will be called for the objects */ \
    inline return_type method_name(constness ::boost::mixin::object& _b_m_obj %{args_signature}) \
    {\
        ::boost::mixin::feature& _b_m_self = _boost_get_mixin_feature((_BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)*)nullptr); \
        BOOST_ASSERT(static_cast< ::boost::mixin::internal::message_t&>(_b_m_self).mechanism == ::boost::mixin::internal::message_t::unicast); \
        const ::boost::mixin::internal::object_type_info::call_table_entry& _b_m_call_entry = _b_m_obj._type_info->_call_table[_b_m_self.id]; \
        const ::boost::mixin::internal::message_for_mixin* _b_m_msg_data = _b_m_call_entry.message_data; \
        BOOST_MIXIN_MSG_THROW_UNLESS(_b_m_msg_data, ::boost::mixin::bad_message_call); \
        /* unfortunately we can't assert(_b_m_msg_data->message == &_b_m_self); since the data might come from a different module */ \
        char* _b_m_mixin_data = _BOOST_MIXIN_GET_MIXIN_DATA(_b_m_obj, _b_m_msg_data->_mixin_id); \
        _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)::caller_func _b_m_func = \
                reinterpret_cast<_BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)::caller_func>(_b_m_msg_data->caller); \
        /* forward unicast arguments since some of them might be rvalue references */ \
        return _b_m_func(_b_m_mixin_data %{coma_fwd_args}); \
    }\
    /* also define a pointer function */ \
    inline return_type method_name(constness ::boost::mixin::object* _b_m_obj %{args_signature}) \
    {\
        return method_name(*_b_m_obj %{coma_fwd_args}); \
    }\

#define _BOOST_MIXIN_MESSAGE%{arity}_MULTI(export, message_name, method_name, return_type, constness %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_DECL(export, message_name, method_name, return_type, constness, multicast %{args_coma}) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* function A: concrete combinator */ \
    template <typename Combinator> \
    void method_name(constness ::boost::mixin::object& _b_m_obj %{args_signature}, Combinator& _b_m_combinator) \
    { \
        ::boost::mixin::feature& _b_m_self = _boost_get_mixin_feature((_BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)*)nullptr); \
        BOOST_ASSERT(static_cast< ::boost::mixin::internal::message_t&>(_b_m_self).mechanism == ::boost::mixin::internal::message_t::multicast); \
        typedef ::boost::mixin::internal::object_type_info::call_table_entry call_table_entry; \
        const call_table_entry& _b_m_call_entry = _b_m_obj._type_info->_call_table[_b_m_self.id]; \
        const call_table_entry* _b_m_begin = _b_m_call_entry.multicast_begin; \
        const call_table_entry* _b_m_end = _b_m_call_entry.multicast_end; \
        BOOST_MIXIN_MSG_THROW_UNLESS(_b_m_begin, ::boost::mixin::bad_message_call); \
        BOOST_ASSERT(_b_m_end); \
        for(const call_table_entry* _b_m_iter = _b_m_begin; _b_m_iter!=_b_m_end; ++_b_m_iter) \
        { \
            const ::boost::mixin::internal::message_for_mixin* _b_m_msg_data = _b_m_iter->message_data; \
            BOOST_ASSERT(_b_m_msg_data); \
            /* unfortunately we can't assert(_b_m_msg_data->message == &_b_m_self); since the data might come from a different module */ \
            char* _b_m_mixin_data = _BOOST_MIXIN_GET_MIXIN_DATA(_b_m_obj, _b_m_msg_data->_mixin_id); \
            _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)::caller_func _b_m_func = \
                reinterpret_cast<_BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)::caller_func>(_b_m_msg_data->caller); \
            /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
            if(!_b_m_combinator.add_result(_b_m_func(_b_m_mixin_data %{coma_args}))) \
            { \
                return; \
            } \
        } \
    } \
    /* function B: template combinator -> can be called on a single line */ \
    template <template <typename> class Combinator> \
    typename Combinator<return_type>::result_type method_name(constness ::boost::mixin::object& _b_m_obj %{args_signature}) \
    { \
        Combinator<return_type> _b_m_combinator; \
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        method_name(_b_m_obj %{coma_args}, _b_m_combinator); \
        return _b_m_combinator.result(); \
    } \
    /* function C: no combinator */ \
    inline void method_name(constness ::boost::mixin::object& _b_m_obj %{args_signature}) \
    { \
        ::boost::mixin::feature& _b_m_self = _boost_get_mixin_feature((_BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)*)nullptr); \
        BOOST_ASSERT(static_cast< ::boost::mixin::internal::message_t&>(_b_m_self).mechanism == ::boost::mixin::internal::message_t::multicast); \
        typedef ::boost::mixin::internal::object_type_info::call_table_entry call_table_entry; \
        const call_table_entry& _b_m_call_entry = _b_m_obj._type_info->_call_table[_b_m_self.id]; \
        const call_table_entry* _b_m_begin = _b_m_call_entry.multicast_begin; \
        const call_table_entry* _b_m_end = _b_m_call_entry.multicast_end; \
        BOOST_MIXIN_MSG_THROW_UNLESS(_b_m_begin, ::boost::mixin::bad_message_call); \
        BOOST_ASSERT(_b_m_end); \
        for(const call_table_entry* _b_m_iter = _b_m_begin; _b_m_iter!=_b_m_end; ++_b_m_iter) \
        { \
            const ::boost::mixin::internal::message_for_mixin* _b_m_msg_data = _b_m_iter->message_data; \
            BOOST_ASSERT(_b_m_msg_data); \
            /* unfortunately we can't assert(_b_m_msg_data->message == &_b_m_self); since the data might come from a different module */ \
            char* _b_m_mixin_data = _BOOST_MIXIN_GET_MIXIN_DATA(_b_m_obj, _b_m_msg_data->_mixin_id); \
            _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)::caller_func _b_m_func = \
                reinterpret_cast<_BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)::caller_func>(_b_m_msg_data->caller); \
            /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
            _b_m_func(_b_m_mixin_data %{coma_args}); \
        } \
    } \
    /* also define a pointer function with no combinator */ \
    inline void method_name(constness ::boost::mixin::object* _b_m_obj %{args_signature}) \
    {\
        method_name(*_b_m_obj %{coma_fwd_args}); \
    }\

#define BOOST_MIXIN_MESSAGE_%{arity}(return_type, message %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_UNI(BOOST_PP_EMPTY(), message, message, return_type, BOOST_PP_EMPTY() %{args_coma})

#define BOOST_MIXIN_CONST_MESSAGE_%{arity}(return_type, message %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_UNI(BOOST_PP_EMPTY(), message, message, return_type, const %{args_coma})

#define BOOST_MIXIN_MULTICAST_MESSAGE_%{arity}(return_type, message %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_MULTI(BOOST_PP_EMPTY(), message, message, return_type, BOOST_PP_EMPTY() %{args_coma})

#define BOOST_MIXIN_CONST_MULTICAST_MESSAGE_%{arity}(return_type, message %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_MULTI(BOOST_PP_EMPTY(), message, message, return_type, const %{args_coma})

#define BOOST_MIXIN_EXPORTED_MESSAGE_%{arity}(export, return_type, message %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_UNI(export, message, message, return_type, BOOST_PP_EMPTY() %{args_coma})

#define BOOST_MIXIN_EXPORTED_CONST_MESSAGE_%{arity}(export, return_type, message %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_UNI(export, message, message, return_type, const %{args_coma})

#define BOOST_MIXIN_EXPORTED_MULTICAST_MESSAGE_%{arity}(export, return_type, message %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_MULTI(export, message, message, return_type, BOOST_PP_EMPTY() %{args_coma})

#define BOOST_MIXIN_EXPORTED_CONST_MULTICAST_MESSAGE_%{arity}(export, return_type, message %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_MULTI(export, message, message, return_type, const %{args_coma})

#define BOOST_MIXIN_MESSAGE_%{arity}_OVERLOAD(message_name, return_type, method_name %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_UNI(BOOST_PP_EMPTY(), message_name, method_name, return_type, BOOST_PP_EMPTY() %{args_coma})

#define BOOST_MIXIN_CONST_MESSAGE_%{arity}_OVERLOAD(message_name, return_type, method_name %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_UNI(BOOST_PP_EMPTY(), message_name, method_name, return_type, const %{args_coma})

#define BOOST_MIXIN_MULTICAST_MESSAGE_%{arity}_OVERLOAD(message_name, return_type, method_name %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_MULTI(BOOST_PP_EMPTY(), message_name, method_name, return_type, BOOST_PP_EMPTY() %{args_coma})

#define BOOST_MIXIN_CONST_MULTICAST_MESSAGE_%{arity}_OVERLOAD(message_name, return_type, method_name %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_MULTI(BOOST_PP_EMPTY(), message_name, method_name, return_type, const %{args_coma})

#define BOOST_MIXIN_EXPORTED_MESSAGE_%{arity}_OVERLOAD(export, message_name, return_type, method_name %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_UNI(export, message_name, method_name, return_type, BOOST_PP_EMPTY() %{args_coma})

#define BOOST_MIXIN_EXPORTED_CONST_MESSAGE_%{arity}_OVERLOAD(export, message_name, return_type, method_name %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_UNI(export, message_name, method_name, return_type, const %{args_coma})

#define BOOST_MIXIN_EXPORTED_MULTICAST_MESSAGE_%{arity}_OVERLOAD(export, message_name, return_type, method_name %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_MULTI(export, message_name, method_name, return_type, BOOST_PP_EMPTY() %{args_coma})

#define BOOST_MIXIN_EXPORTED_CONST_MULTICAST_MESSAGE_%{arity}_OVERLOAD(export, message_name, return_type, method_name %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_MULTI(export, message_name, method_name, return_type, const %{args_coma})
