#
# Copyright (c) 2013-2014 Borislav Stanimirov, Zahary Karadjov
#
# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt
#

# generates some mixins for the mutation performance tests


HEADER_FILE = 'generated.hpp'
COMPILE_FILE = 'generated.cpp'
NUM_MIXINS = 8

h_out = <<DATA
//
// Copyright (c) 2013-2014 Borislav Stanimirov, Zahary Karadjov
//
// Distributed under the Boost Software License, Version 1.0.
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
// this file is automatically generated by a script
DATA

c_out = h_out.clone

h_out += "#pragma once\n"

c_out += "#include \"common.hpp\"\n"
c_out += "#include \"#{HEADER_FILE}\"\n"
c_out += "using namespace boost::mixin;\n"

FDATA = [:type_templates, :mixins]

class FileData
  FDATA.each do |sym|
    attr_accessor sym
  end

  def combine_data
    data = ''
    FDATA.each do |sym|
      data += "\n"
      data += send(sym)
    end
    data += "\n"

    data
  end
end

############################################################

H_MIXIN_ENTRY = <<DATA
BOOST_DECLARE_MIXIN(%{mixin_name});
DATA

C_MIXIN_ENTRY = <<DATA

class %{mixin_name}
{
  int %{members};
};
BOOST_DEFINE_MIXIN(%{mixin_name}, none);
DATA

declare = FileData.new
define = FileData.new

declare.mixins = ''
define.mixins = ''

1.upto(NUM_MIXINS) do |i|
  params = {
    :mixin_name => "mixin_#{i}",
    :members => (1..i).map { |i| "a#{i}" }.join(', ')
  }

  declare.mixins += H_MIXIN_ENTRY % params
  define.mixins += C_MIXIN_ENTRY % params
end

############################################################

declare.type_templates = 'void create_type_templates(std::vector<boost::mixin::object_type_template*>& v)'
define.type_templates = declare.type_templates.clone

declare.type_templates  += ";\n"
define.type_templates += "\n{\n"

C_TMPL_ENTRY = <<DATA
  {
    object_type_template* t = new object_type_template;

    t->
      %{adds}
      .create();

    v.push_back(t);
  }
DATA

1.upto(NUM_MIXINS) do |i|
  (1..NUM_MIXINS).to_a.combination(i).each do |c|
    adds = c.map do |i|
      "add<mixin_#{i}>()"
    end

    params = { :adds => adds.join('.') }

    define.type_templates += C_TMPL_ENTRY % params
  end
end

define.type_templates += "}"

############################################################

h_out += declare.combine_data
c_out += define.combine_data

File.open(HEADER_FILE, "w").write(h_out)
File.open(COMPILE_FILE, "w").write(c_out)
