
namespace boost
{
namespace mixin
{
namespace internal
{

template <typename Mixin, typename Ret %{typename_caller_args}, Ret (Mixin::*Method)(%{arg_types})>
Ret caller%{arity}(void* mixin_ptr %{args_signature})
{
    Mixin* m = reinterpret_cast<Mixin*>(mixin_ptr);
    return (m->*Method)(%{args});
}

}
}
}


#define _BOOST_MIXIN_MESSAGE%{arity}_DECL(export, domain, message_name, method_name, return_type, constness, message_mechanism %{args_coma}) \
    /* mechanism shows whether it's a multicast or unicast */ \
    \
    /* step 1: define the message struct */ \
    struct export _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name) : public ::boost::mixin::internal::message_t \
    { \
        typedef return_type (*caller_func)(void* %{coma_arg_types}); \
        _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)() \
            : ::boost::mixin::internal::message_t(BOOST_PP_STRINGIZE(message_name), message_mechanism) \
        {} \
        template <typename Mixin> \
        ::boost::mixin::internal::func_ptr get_caller_for() const \
        { \
            /* prevent the linker to optimize away the caller function */ \
            static caller_func caller = ::boost::mixin::internal::caller%{arity}<constness Mixin, return_type %{coma_arg_types}, &Mixin::method_name>; \
            /* cast the caller to a void (*)() - safe acoording to the standard */ \
            return reinterpret_cast< ::boost::mixin::internal::func_ptr>(caller); \
        } \
    }; \
    /* step 2: define a message tag, that will be used to identify the message in feature lists */ \
    /* it would have been nice if we could set this global variable to the unique global instance of the feature*/ \
    /* but unfortunately we cannot trust dynamic libraries to keep it straight for us */ \
    /* hence we rely on a getter like the mixin one */ \
    extern export _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name) * _BOOST_MIXIN_MESSAGE_TAG(message_name); \
    /* step 3: declare the feature getter and manual registrator for the message */ \
    extern export ::boost::mixin::feature& _boost_get_mixin_feature(const _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export void _boost_register_mixin_feature(const _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)*); \

#define _BOOST_MIXIN_MESSAGE%{arity}_UNI(export, domain, message_name, method_name, return_type, constness %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_DECL(export, domain, message_name, method_name, return_type, constness, unicast %{args_coma}) \
    /* step 4: define the message function -> the one that will be called for the objects */ \
    inline return_type method_name(constness ::boost::mixin::object* obj %{args_signature}) \
    {\
        ::boost::mixin::feature& self = _boost_get_mixin_feature((_BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)*)nullptr); \
        BOOST_ASSERT(static_cast< ::boost::mixin::internal::message_t&>(self).mechanism == ::boost::mixin::internal::message_t::unicast); \
        const ::boost::mixin::internal::object_type_info::call_table_entry& call_entry = obj->_type_info->_call_table[self.id]; \
        const ::boost::mixin::internal::message_for_mixin* msg_data = call_entry.message_data; \
        BOOST_ASSERT(msg_data); \
        BOOST_ASSERT(msg_data->message == &self); \
        char* mixin_data = reinterpret_cast<char*>(const_cast<void*>(obj->internal_get_mixin(*msg_data->mixin_info))); \
        _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)::caller_func func = reinterpret_cast<_BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)::caller_func>(msg_data->caller); \
        return func(mixin_data %{coma_args}); \
    }\

#define _BOOST_MIXIN_MESSAGE%{arity}_MULTI(export, domain, message_name, method_name, return_type, constness %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_DECL(export, domain, message_name, method_name, return_type, constness, multicast %{args_coma}) \
    /* step 4: define the message function -> the one that will be called for the objects */ \
    inline void method_name(constness ::boost::mixin::object* obj %{args_signature}) \
    {\
        ::boost::mixin::feature& self = _boost_get_mixin_feature((_BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)*)nullptr); \
        BOOST_ASSERT(static_cast< ::boost::mixin::internal::message_t&>(self).mechanism == ::boost::mixin::internal::message_t::multicast); \
        typedef ::boost::mixin::internal::object_type_info::call_table_entry call_table_entry; \
        const call_table_entry& call_entry = obj->_type_info->_call_table[self.id]; \
        const call_table_entry* begin = call_entry.multicast_begin; \
        const call_table_entry* end = call_entry.multicast_end; \
        BOOST_ASSERT(begin); \
        BOOST_ASSERT(end); \
        for(const call_table_entry* iter = begin; iter!=end; ++iter) \
        { \
            const ::boost::mixin::internal::message_for_mixin* msg_data = iter->message_data; \
            BOOST_ASSERT(msg_data); \
            BOOST_ASSERT(msg_data->message == &self); \
            char* mixin_data = reinterpret_cast<char*>(const_cast<void*>(obj->internal_get_mixin(*msg_data->mixin_info))); \
            _BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)::caller_func func = reinterpret_cast<_BOOST_MIXIN_MESSAGE_STRUCT_NAME(message_name)::caller_func>(msg_data->caller); \
            return func(mixin_data %{coma_args}); \
        }\
    }

#define BOOST_MIXIN_MESSAGE_%{arity}(return_type, message %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_UNI(BOOST_PP_EMPTY(), ::boost::mixin::default_domain, message, message, return_type, BOOST_PP_EMPTY() %{args_coma})

#define BOOST_MIXIN_CONST_MESSAGE_%{arity}(return_type, message %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_UNI(BOOST_PP_EMPTY(), ::boost::mixin::default_domain, message, message, return_type, const %{args_coma})

#define BOOST_MIXIN_MULTICAST_MESSAGE_%{arity}(return_type, message %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_MULTI(BOOST_PP_EMPTY(), ::boost::mixin::default_domain, message, message, return_type, BOOST_PP_EMPTY() %{args_coma})

#define BOOST_MIXIN_CONST_MULTICAST_MESSAGE_%{arity}(return_type, message %{args_coma}) \
    _BOOST_MIXIN_MESSAGE%{arity}_MULTI(BOOST_PP_EMPTY(), ::boost::mixin::default_domain, message, message, return_type, const %{args_coma})

