[/
 Copyright (c) 2013 Borislav Stanimirov, Zahary Karadjov

 Distributed under the Boost Software License, Version 1.0.
 See accompanying file LICENSE_1_0.txt or copy at
 http:#www.boost.org/LICENSE_1_0.txt
/]

[section:roadmap Roadmap]

Here is a list of planned features and events for the library: (The authors
write it in their own free time, so concrete dates are hard to estimate)


* Probably by October 2013
    * Unit tests
    * Performance tests
    * Tutorials
    * Full reference documentation
    * Preliminary submission to Boost
* Hopefully by the end of 2013:
    * Work on more sensible (and helpful) runtime and compile-time errors.
    Missing messages, ambiguous message priority, etc.
    * Add more graceful runtime error handling, more specific non-breaking exceptions
    * Formal submission to Boost
* Not soon, but with concrete idea of how to be done:
    * object copy-constructors + mixin feature `copyable`
    * private messages/mixins - messages/mixins that are not used outside of a
    module - leave more room for other messages/mixins in a domain
    * Add a new mixin feature `fact`. Facts are static const variables in a
    mixin. No multicasts. No virtual tables.
    * Add default message implementations (if none is provided)
    * Call mixin constructors when mutating object or constructing them via
    object type templates. Sample usage:
    `mutate(obj).add<mixin>("foo", param2).add<other_mixin>(42)`
    * Reflection. Create objects with mixins by string. Call messages by string.
    * "Static" mixins. As long as they're not mutated in or out, it provides a
    faster message execution.
    * Integration with Boost.Serialization. As long as the mixins of an object
    are serializable, the object will be, too.
    * Make use of the fact that a BIG execution time improvement can be made if
    a user has no mixins or messages defined in a dynamic library (and has no
    plans to add such)
    * Reduce library memory footprint
    * Vectorized mixin/message memory: Instead of having a maximal number of
    them in a domain, grow the mixin_type_info/message_info buffers by that
    number
    * Unused type garbage collector. When no objects exist of a given type it
    can be garbage collected, saving up to a kilobyte of memory.
* When humankind becomes a Kardashev type two civilization:
    * Integration with Boost.Thread. Call messages for a specific thread.
    * User-defined message hooks. Sample implementation with messages called on
    objects on another device through Boost.Asio.
    * A way to mutate static mixins in and out. Slight mutation execution penalty.
    * Some magic to make it work even faster.
    * Integration with Boost.Python and luabind.
    * Remove C++03 backward compatibility
    * Library being accepted in Boost

[endsect]
