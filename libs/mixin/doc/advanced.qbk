[/
 Copyright (c) 2013 Borislav Stanimirov, Zahary Karadjov

 Distributed under the Boost Software License, Version 1.0.
 See accompanying file LICENSE_1_0.txt or copy at
 http://www.boost.org/LICENSE_1_0.txt
/]

[section:advanced Advanced topics]


[section:performance Performance]
[indexterm performance]

[section:msg_perf Message performance]
[indexterm2 message..performance]

The performance of messages is indeed slower than regular message calls and even
virtual function calls. Even though a call's algorithmic complexity is still
O(1), a number of memory indirections happen in order to call the actual method
behind the message.

Unfortunately it's hard to estimate exactly how much slower the message call is.
With perfect cache locality and compiler optimizations a message call will take
about 15 cycles, compared to about 5-7 cycles for a virtual call and 10-12
cycles for a std::function call. 15 cycles on a modern 2.8 GHz processor take
about 5 nanoseconds to execute, which is a negligible cost for a call.

Unfortunately perfect cache locality is hard to come by, and especially hard in
polymorphic code. In an amortized test with potential cache misses
for all calls, Boost.Mixin messages take on average about 120 cycles (40
nanoseconds on the same processor), compared to 90 cycles on average for virtual
calls and 115 cycles for a `std::function` call.

So, generally speaking if the programmer doesn't take special care to achieve
cache locality for their object lists, a message call is about 2 times slower
than a regular method call and about 1.3 times slower than a virtual call and
abotut as fast as a `std::function` call, which
again can be called negligible.

As, we've mentionet before if cache locality is an absolutely
critical feature for the desired performance, mixin messages, virtual calls,
`std::function`, and other types of polymorphism will almost certainly
be detrimental for this code, and the programmers are advised to do something
else.

[section:msg_perf_test Message performance test]

The message performance test compares regular method calls vs virtual method
calls vs `std::function` calls vs Boost.Mixin unicast message calls.

It creates 10,000 objects, then processes them until 100,000,000 calls are made.
The actuall calls perform a simple adition whose cost compared with the call
cost is indeed negligible.

The regular method calls are what you would have in cache-locality optimized
setting -- they are methods in an array of objects of the the same type stored
by value.

The other calls are polymorphic and their arrays store objects by address that
can be one of two types.

Here are some test results:

* OS: Ubuntu 13.04
* CPU: AMD FX X8 8150
* Compiler: g++ (Ubuntu/Linaro 4.7.3-1ubuntu1)
* Debug compilation parameters: `-fexceptions -g`
* Release compilation parameters `-fexceptions -O2`

[table
    [
        [Method]
        [Debug]
        [Debug mean]
        [Release]
        [Release mean]
    ]
    [
        [Regular]
        [2345 ms]
        [23 ns]
        [1088 ms]
        [11 ns]
    ]
    [
        [Virtual]
        [2894 ms]
        [29 ns]
        [1580 ms]
        [16 ns]
    ]
    [
        [`std::function`]
        [11910 ms]
        [119 ns]
        [1966 ms]
        [20 ns]
    ]
    [
        [Boost.Mixin msg]
        [4942 ms]
        [50 ns]
        [1986 ms]
        [20 ns]
    ]
]

* OS: Windows 7
* CPU: AMD FX 4100
* Compiler: msvc 9 (Visual Studio 2008)
* Debug compilation parameters: Standard (`/Od /EHsc /RTC1 /MDd /ZI`)
* Release compilation parameters: Standard, but with no link time code generation (`/O2 /Oi /EHsc /MD /Gy /Zi`)

[table
    [
        [Method]
        [Debug]
        [Debug mean]
        [Release]
        [Release mean]
    ]
    [
        [Regular]
        [4103 ms]
        [41 ns]
        [1419 ms]
        [14 ns]
    ]
    [
        [Virtual]
        [5585 ms]
        [55 ns]
        [1560 ms]
        [16 ns]
    ]
    [
        [`boost::function`]
        [45240 ms]
        [452 ns]
        [1919 ms]
        [19 ns]
    ]
    [
        [Boost.Mixin msg]
        [25100 ms]
        [251 ns]
        [2714 ms]
        [27 ns]
    ]
]

[endsect]

[endsect]

[endsect]

[section:allocators Using custom allocators]
[endsect]

[section:dynlib Dynamic libraries and program plugins]
[endsect]

[endsect]
